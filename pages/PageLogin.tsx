import React, { useState, useEffect } from 'react';
import 'firebase/compat/firestore';
import styles from '../styles/Home.module.css'
import Head from 'next/head'
import Image from 'next/image'
import { db } from "../src/firebase"
import { getFirestore, collection, query, where, onSnapshot, doc, setDoc, Timestamp, serverTimestamp, addDoc } from 'firebase/firestore'
import { addUser, selectUser } from '../src/features/userSlice';
import { useDispatch, useSelector } from 'react-redux';
import { useRouter } from "next/router";
import { store } from '../src/app/store';
import { Provider } from 'react-redux';
import Link from 'next/link'
import liff from '@line/liff';
import dynamic from 'next/dynamic'
import { stringify } from 'querystring';
import useSWR from 'swr'
import Person from '../components/Person'
import User from '../components/User'
import { launchCamera, launchImageLibrary } from 'react-native-image-picker';
export default function PageLogin() {
    const PageL = dynamic(
        () => import('../src/pageL'),
        { ssr: false }
    )
    // const [uid, setUid] = useState<string>('');
    // const [name, setName] = useState<string>('');
    // const [icon, setIcon] = useState<string | undefined>('');

    // const router = useRouter()
    // const toPageA = () => {
    //     router.push('./PageA')
    // }
    // const toPageB = () => {
    //     router.push('./PageB')
    // }
    // const registUser = () => {
    //     onload()
    //     // toPageA()
    //     toPageB()
    // };
    // const loginUrl: string | undefined = process.env.NEXT_PUBLIC_LINE_LOGIN_URL
    // const LINEID = process.env.NEXT_PUBLIC_REACT_APP_LIFF_ID
    // const lineClick = () => {
    //     setUid('')
    //     liff.init({ liffId: LINEID as string })
    //         .then(() => {
    //             if (!liff.isLoggedIn()) {
    //                 liff.login() // ログインしていなければ最初にログインする
    //             } else if (liff.isInClient()) {
    //                 liff.getProfile()  // ユーザ情報を取得する
    //                     .then(profile => {
    //                         // const userId: string = profile.userId
    //                         const displayName: string = profile.displayName
    //                         const displayicon: string | undefined = profile.pictureUrl
    //                         setName(profile.displayName)
    //                         setUid(profile.userId)
    //                         setName(displayName)
    //                         setIcon(displayicon)
    //                         // dispatch(addUser({ name, uid, icon }))
    //                     })
    //             }
    //         })
    // }

    // const line = require('@line/bot-sdk');
    // const config: any = {
    //     channelSecret: process.env.NEXT_PUBLIC_CHANNEL_SECRET,//チャンネルシークレット
    //     idToken: process.env.NEXT_PUBLIC_ACCESS_TOKEN, //アクセストークン
    // };
    // const client = new line.Client({
    //     channelAccessToken: process.env.NEXT_PUBLIC_ACCESS_TOKEN
    // });
    // const message = {
    //     type: 'text',
    //     text: 'Hello World!'
    // };
    // const onload = function () {
    //     liff
    //         .init({ liffId: LINEID as string })
    //         .then(() => {
    //             liff.getProfile()  // ユーザ情報を取得する
    //                 .then(profile => {
    //                     const userId: string = profile.userId
    //                     const displayName: string = profile.displayName
    //                     const displayicon: string | undefined = profile.pictureUrl
    //                     setName(profile.displayName)
    //                     setUid(userId)
    //                     setName(displayName)
    //                     setIcon(displayicon)
    //                     // dispatch(addUser({ name, uid, icon }))
    //                     console.log('uid', { uid })
    //                     const setRef = setDoc(doc(db, 'users', `${uid}`), {
    //                         uid,
    //                         name,
    //                         icon,
    //                         timestamp"",
    //                     }, { merge: true }//←上書きされないおまじない
    //                     )
    //                     // fetchAPI()
    //                     console.log('user', setRef)
    //                 }).catch(function (error) {
    //                 });
    //         }).catch(

    //         )
    // }
    // const options = {
    //     mediaType: 'photo',
    //     maxWidth: 1000,
    //     maxHeight: 1000,
    //     quality: 0.8,
    //     saveToPhotos: true,
    // };

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <h1 className={styles.title}>
                    Welcome to <a href="https://nextjs.org">Next.js!</a>
                </h1>
                <p className={styles.description}>
                </p>

                <section className="h-screen w-4/5 max-w-5xl mx-auto flex items-center justifycenter flex-col">
                    <React.StrictMode >
                        <Provider store={store}>
                            <PageL />
                        </Provider>
                    </React.StrictMode>
                </section>
                <div className={styles.grid}>
                    {/* <Link href="http://localhost:3000/PageA">pageA</Link> */}
                    <p>
                        Instantly deploy your Next.js site to a public URL with Vercel.
                    </p>
                </div>
            </main>

            <footer className={styles.footer}>
                <a
                    href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    Powered by{' '}
                    <span className={styles.logo}>
                        <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
                    </span>
                </a>
            </footer>
        </div>
    )
}
